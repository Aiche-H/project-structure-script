#!/bin/bash

# Function to create a page directory with its subdirectories and files
create_page() {
    local page_name=$1
    mkdir -p "pages/$page_name"
    cat <<EOL > "pages/$page_name/$page_name.html"
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="" type="image/x-icon" />
    <link rel="stylesheet" href="../../global/css/global.css" />
    <link rel="stylesheet" href="local-css/$page_name.css" />
    <title>$page_name</title>
  </head>
  <body>

    <script src="../../global/javascript/global.js"></script>
    <script src="local-javascript/$page_name.js"></script>
  </body>
</html>
EOL
    mkdir -p "pages/$page_name/local-css"
    touch "pages/$page_name/local-css/$page_name.css"
    mkdir -p "pages/$page_name/local-javascript"
    touch "pages/$page_name/local-javascript/$page_name.js"
    mkdir -p "pages/$page_name/local-data"
    mkdir -p "pages/$page_name/local-images"
}

# Create the main directories
mkdir -p resources
mkdir -p pages
mkdir -p global

# Create subdirectories in resources
mkdir -p resources/css
mkdir -p resources/javascript

# Create subdirectories in global
mkdir -p global/css
mkdir -p global/javascript
mkdir -p global/images
mkdir -p global/data

# Create the global.css and global.js files
touch global/css/global.css
touch global/javascript/global.js

# Create the root index.html file
cat <<EOL > index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="" type="image/x-icon" />
    <link rel="stylesheet" href="global/css/global.css" />
    <link rel="stylesheet" href="pages/index/local-css/index.css" />
    <title>Root Page</title>
  </head>
  <body>

    <script src="pages/index/local-javascript/index.js"></script>
    <script src="global/javascript/global.js"></script>
  </body>
</html>
EOL

# Create the index folder in pages without an index.html file
mkdir -p "pages/index"
mkdir -p "pages/index/local-css"
touch "pages/index/local-css/index.css"
mkdir -p "pages/index/local-javascript"
touch "pages/index/local-javascript/index.js"
mkdir -p "pages/index/local-data"
mkdir -p "pages/index/local-images"

# Create readme.md
touch readme.md

# Create gitignore with specified content
cat <<EOL > .gitignore
# See http://help.github.com/ignore-files/ for more about ignoring files.

# compiled output
/dist
/tmp
/out-tsc

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# IDEs and editors
.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# misc
.sass-cache
connect.lock
typings

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# Lerna
lerna-debug.log

# System Files
.DS_Store
Thumbs.db
EOL

# Create page directories based on the provided arguments
for page in "$@"; do
    create_page "$page"
done

# Print a success message
echo "Folder structure created successfully!"
